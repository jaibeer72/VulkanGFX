cmake_policy(SET CMP0091 NEW)

# Set the project name
project(Cross-Platform-VulkanGFX)

# settings xcode project directory to the source directory
set(CMAKE_XCODE_ATTRIBUTE_PROJECT_DIR "${CMAKE_SOURCE_DIR}/Source/")

#Set Minimum requriements for the project 
cmake_minimum_required(VERSION 3.5)

# Recursively find all source files
file(GLOB_RECURSE SOURCE_FILES ${CMAKE_SOURCE_DIR}/Source/*.cpp ${CMAKE_SOURCE_DIR}/Source/*.h ${CMAKE_SOURCE_DIR}/Source/*.hpp)

# Create a source group for each directory in the Source folder
foreach(FILE ${SOURCE_FILES})
    # Get the directory of the source file
    get_filename_component(PARENT_DIR "${FILE}" DIRECTORY)

    # Remove the ${CMAKE_SOURCE_DIR} prefix from the directory
    string(REPLACE "${CMAKE_SOURCE_DIR}" "" GROUP "${PARENT_DIR}")

    # Make sure we are using windows slashes
    string(REPLACE "/" "\\" GROUP "${GROUP}")

    # Group into "Source" group
    source_group("Source${GROUP}" FILES "${FILE}")
endforeach()

# Include Conan dependencies
#include(${CMAKE_BINARY_DIR}/cmakedeps_macros.cmake) # This file will be generated by Conan

# Set the include directories via conan dependencies
include(${CMAKE_BINARY_DIR}/conan_toolchain.cmake)

# Include dependencies from Conan
list(APPEND CMAKE_MODULE_PATH ${CMAKE_BINARY_DIR})
find_package(Vulkan REQUIRED)
find_package(glm REQUIRED)
find_package(glfw3 REQUIRED)


# Add executable
add_executable(Cross-Platform-VulkanGFX ${SOURCE_FILES})

# Set C++ standard
set_property(TARGET Cross-Platform-VulkanGFX PROPERTY CXX_STANDARD 11)

# # Link Conan libraries
 target_link_libraries(${PROJECT_NAME} PUBLIC Vulkan::Vulkan glm::glm glfw)
 target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_11)
